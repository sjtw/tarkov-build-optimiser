version: '3'

dotenv:
  - .env

tasks:
  api:build:
    desc: Build the api
    cmd: go build -o bin/api ./cmd/api

  api:start:
    desc: start the api locally
    deps: [api:build, compose:up]
    cmds:
      - ./bin/api

  docker:build:
    desc: Build Docker image
    cmd: docker build -t tarkov-build-optimiser .

  clean:
    desc: Clean the project
    cmds:
      - go clean
      - rm -rf bin
      - rm file-caches/*.json

  compose:postgres:up:
    desc: Start the local database
    cmd: docker compose --env-file .env up -d postgres

  compose:up:
    desc: Start the local environment
    cmd: docker compose --env-file .env up -d

  compose:restart:
    desc: Restart the local environment
    deps: [compose:down, compose:up]

  compose:down:
    desc: Stop the local environment
    cmd: docker compose --env-file .env down

  importer:start:use-cache:
    desc: Start the importer - retrieve cached data instead of fetching from the tarkovdev API
    deps: [importer:build]
    cmd: ./bin/importer --use-cache

  importer:start:cache-only:
    desc: Start the importer - only cache the data as json
    deps: [importer:build]
    cmd: ./bin/importer --cache-only

  importer:build:
    desc: Build the importer
    cmd: go build -o bin/importer ./cmd/importer

  importer:start:
    desc: Start the importer
    deps: [importer:build]
    cmd: ./bin/importer

  lint:
    desc: Run linter
    cmd: golangci-lint run

  migrate:create:
    desc: Create a new migration
    cmd: goose -dir=./migrations create {{.CLI_ARGS}} go

  migrate:build:
    desc: Build the migrations
    cmd: go build -o bin/migrate ./cmd/migrations/*.go

  migrate:down:
    desc: Rollback migrations
    deps: [compose:postgres:up, migrate:build]
    cmd: ./bin/migrate postgres "host=$POSTGRES_HOST user=$POSTGRES_USER password=$POSTGRES_PASSWORD dbname=$POSTGRES_DB port=$POSTGRES_PORT sslmode=disable" down

  migrate:up:
    desc: Apply migrations
    deps: [compose:postgres:up, migrate:build]
    cmd: ./bin/migrate postgres "host=$POSTGRES_HOST user=$POSTGRES_USER password=$POSTGRES_PASSWORD dbname=$POSTGRES_DB port=$POSTGRES_PORT sslmode=disable" up

  migrate:ci:
    desc: Apply migrations in CI
    cmd: ./bin/migrate postgres "host=$POSTGRES_HOST user=$POSTGRES_USER password=$POSTGRES_PASSWORD dbname=$POSTGRES_DB port=$POSTGRES_PORT sslmode=disable" up

  start:local:
    desc: Start full local environment
    deps: [compose:start, api:start]

  test:
    desc: Run tests
    cmd: go test ./...

  tarkovdev:get-schema:
    desc: Retrieve the latest schema from the tarkov.dev API
    cmd: graphql-inspector introspect https://api.tarkov.dev/graphql --write ./internal/tarkovdev/schemas/schema.graphql

  tarkovdev:regenerate:
    desc: Regenerate the tarkovdev client
    cmd: go run github.com/Khan/genqlient

  tarkovdev:
    desc: Sync the tarkovdev schema and regenerate the client
    deps: [tarkovdev:get-schema, tarkovdev:regenerate]

  deps:install:go:
    desc: Install go dependencies
    cmd: ./scripts/install-go-deps.sh

  deps:install:node:
    desc: Install node dependencies
    cmd: ./scripts/install-node-deps.sh

  init:go-only:
    desc: Initialise the project for development (without nodejs/tarkovdev schema dependencies)
    deps: [deps:install:go, compose:up, migrate:up]

  init:
    desc: Initialise the project for development
    deps: [deps:install:node, compose:up, migrate:up]

  env:
    desc: Print the environment variables
    cmds:
      - echo $PATH

  default:
    cmd: task --list-all